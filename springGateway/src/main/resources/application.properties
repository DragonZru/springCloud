server.port=8090

# 启用路由发现匹配功能，自动从服务注册中心中获取服务列表
# 开启之后 自定义gateway filter 不起作用??
#spring.cloud.gateway.discovery.locator.enabled=true

# 启用 HTTP 请求和响应的日志记录,通常用于调试目的
spring.cloud.gateway.httpclient.wiretap=false

# 使用 XForwardedRemoteAddressResolver 解析远程客户端地址
spring.cloud.gateway.forwarded.remote-address-resolver=x-forwarded
# 设置最大允许的 IP 地址数量
spring.cloud.gateway.forwarded.max-trusted-index=1

# 使用consul 服务发现
spring.cloud.gateway.routes[0].id=consumer
# consumer - 注册服务名
spring.cloud.gateway.routes[0].uri=lb://consumer
# 请求路径以/consumer进行处理
spring.cloud.gateway.routes[0].predicates[0]=Path=/consumer/**
# 截取第一个str  /consumer/**   ==>  /**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
# 自定义登陆拦截器
spring.cloud.gateway.routes[0].filters[1]=Auth=true

spring.cloud.gateway.routes[1].id=provider
spring.cloud.gateway.routes[1].uri=lb://provider
spring.cloud.gateway.routes[1].predicates[0]=Path=/provider/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1
spring.cloud.gateway.routes[1].filters[1]=Auth=true

#熔断机制 - CircuitBreaker
spring.cloud.gateway.routes[1].filters[2].name=CircuitBreaker
spring.cloud.gateway.routes[1].filters[2].args.name=fallbackCmdA
spring.cloud.gateway.routes[1].filters[2].args.fallbackUri=forward:/fallbackA



spring.cloud.consul.host=localhost
spring.cloud.consul.port=8500

# 生产者模块配置，instance-id 可以根据业务逻辑自行定义
spring.cloud.consul.discovery.service-name=gateway
spring.cloud.consul.discovery.instance-id=gateway:${server.port}

# 消费者模块，不需要注册到consul
spring.cloud.consul.discovery.register=false